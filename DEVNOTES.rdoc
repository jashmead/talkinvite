=== Overall Strategy

* Starting with tutorial & branching out
* Build up horizontally rather than vertically
* Build up database/models; routes/controllers; views/css; js -- to extent possible
* Avoid premature instantiation, don't put stuff in till about to use (& test) -- put it in comments instead
* start with mobile, look at responsive design later
* Make maximum use of existing examples
* Make best use of having an overall plan, keep loose but focused & energetic
* Simple design, images from the talks, not from site

=== Levels

1. tables -- have 16, with models & controls & basic set of views
1. routes -- have 185, all have tests
1. views & partials
1. external testing, i.e. watir

=== Phases

1. people -- except for authentication
1. talks -- start talk, talk central, search for talks
1. posts, members -- implicit, not shown explicitly
1. comments -- like posts, but done by anyone & don't change the state
1. messages
1. maps -- leaflet
1. authentication -- email, better authentication, make password stuff separate
1. friends, groups, relationships
1. calendars
1. attachments
1. move talkinvite to web; put up website
1. move to phone gap -- on simulator
1. phone gap on phone
1. oauth for twitter, github
1. venues
1. tweets
1. facebook posts
1. ask friends to test
1. post to apple store
1. ads -- definitely phase two
1. messages supercharges:  time to live, attachments (like SnapChat)

=== Libraries

1. Ruby Gems
1. Leaflet
1. JQuery calendar tool of some kind

=== Quality checks
1. Check for clarity of code, using codeclimate for this
1. Check for coverage by tests, area by area
1. Check against best practices
1. Fix README to conform to standards in Beautiful Ruby
1. Check against references
1. Use database checks

=== Buzzword compliance
1. DRY -- do not repeat yourself
1. BDD/TDD  -- behavior driven development/test driven development
1. YAGNI -- you ain't gonna need it
1. SOC -- separation of concerns

=== Cleanup

1. remove talkvite3, talk_vite, talkvite, & role talkvite -- after running checks

=== Bibliography

* Agile Web Development with Rails 3.2
* Beautiful Ruby
* Eloquent Ruby
* Practical Object Oriented Ruby
* Pro ActiveRecord
* Programming Ruby 
* Rails 4 in Action
* Rails Anti-Patterns
* Rails Recipes
* Rspec Book
* Ruby Best Practices
* Ruby Guides -- http://guides.rubyonrails.org
* Ruby Koans
* Rails Tutorial -- http://ruby.railstutorial.org/ruby-on-rails-tutorial-book?version=4.0
* Ruby on Rails 4
* The Rails 3 Way
* The Ruby Way

=== History

The system is a mashup of the Ruby on Rails tutorial by Michael Hardl 
(http://ruby.railstutorial.org/ruby-on-rails-tutorial-book?version=4.0), 
Twitter (which was originally written in Ruby on Rails),
Leaflet (Google maps, Open Street Map),
jQuery Calendar stuff,
SVG for advanced layouts,
some PostgreSQL specific stuff,
and a bit of glue.

=== Requisites & Deployment Instructions

* Ruby version: 2.0.0
* Rails version: 4.0.0
* System dependencies: Ruby, Rails, Postgres, divers libraries
* Configuration
* Database:  Postgres
* Database initialization:
  1. Create role talkinvite; databases talkinvite_development & talkinvite_test
  1. Use structure.sql to rebuild, since schema.rb does not know about the foreign keys.
  1. To reset, use: rake db:reset
* To run the test suite <tt>rspec spec</tt>
* Services* (job queues, cache servers, search engines, etc.)
* Deployment instructions:  
  1. gic -- git commit
  2. xt-all -- run migrations, rebuild bundles, then test
  3. yt -- test actual web pages
  4. gm branch -- merge branch back to master
  5. zt -- upload to heroku

Note that a fair amount of setup is done in ~/.talkinvite, setting CBPATH, PATH, PostgreSQL stuff, and so on.

=== Searches

1. web searches
1. site searches
1. personal searches
1. twitter & other social media searches
1. location searches
1. time searches
1. other canned searches?

=== Dev Notes

1. admins are always subscribers!
1. talkinvite is the default, anonymous identity
1. when changing data types, make sure all the test code knows about the new types
1. when adding/changing/deleting fields:  check all the spec code:  requests, models, controllers, views, & factories
1. codeclimate is a bit fussy on duplication -- see notes in specific files, with that said, a 4.0 grade does give the warm fuzzies.
1. you can get at the functions defined in app/helpers directly from the views (i.e. current_layout) but have to specific a 'view_context' object from inside a controller (i.e. view_context.current_layout).  Note the current_layout is the top level layout, i.e. credits not index)
* No user-supplied URLs; too risky
1. don't use name 'search' for a button; it confuses RoR or someone
1. nested lists don't seem to work correctly in rdoc, so keep at one level for now
1. nested includes don't seem to work in rdoc, so pull in everything from base README.rdoc
1. what is difference between '<% %>' and '<% -%>'?

=== Final Cleanup

verify all pages linked & documented

to verify documentation coverage (https://github.com/rdoc/rdoc):
rdoc -C app

