== Schema

=== Core Tables

Note we can't use 'file' as a table name, conflicts with Ruby

1. Schema_Migrations -- no views or controllers for these
1. People -- will be adding locations to this
1. Sessions
1. Talks -- links up to people, will be adding venues to this
1. Members -- links to talk & to people, includes 'admin' status (with reference to talk), payload is rsvp_status, member_type
1. Comments -- links to talk & to people, payload is text
1. Messages -- person to person, various modalities, sender, receiver, talk
1. Credits -- links to creator, name, details, url, tags point to this as well!
1. Helps
1. Maps -- links to creator, has datasets, center, scale, maybe type on it, has link to talk, may need settings as well (json field). virtual table, like sessions.
1. Calendars -- like maps

=== Phase II & III tables

1. Tags, HashTags, Interests
1. Friends, Groups, Relationships
1. Attachments
1. Ads
1. Sessions

==== Tags, HashTags, Interests

* grow out of talk searches
* therefore not needed in phase I
* aka topics
* used to find talks in talkinvite
* used for twitter & other searches on web 
* kind of mini-comments
* have examples, as in Rails 4 in Action:  searcher gem, attr accessors, a few other things
* analogous to hashtags in Twitter
* can be mass-produced by splitting up the summary
* can ask for hashtag
* allow addition of tags by originator & probably by users
* see usage in meetup.com
* tags apply to multiple talks
* can use user's interests to search for talks they might be interested in
* how to structure? tag->talk; user<-tag->talk, tag<-join_table->talk, ...

==== Friends, Groups, Relationships

* Grow out of members
  * start with member related searches
  * therefore not needed in Phase I 
* Friends
  * reciprocally authorized
  * point from source to target
*Groups
  * point to source only, used to help break out friends into (possibly overlapping) sets
* Relationships
  * point to both Friends & Groups

==== Attachments

* like name, description in users, talks at start
* therefore not needed for phase I
* polymorphic
* point up to talks, people, credits, helps, pretty much everything
* standard, work from examples, as Rails in Action
* needs maintenance reports
* have a creator (for people has to be the person him or her self)

==== Ads

* not sure we are goint to use
* therefore, not needed for Phase I or II
* to generate revenue; in parallel with talks, comments, to blend in with them
* unclear, will need content, stats, strategy, contact/source

==== Sessions

* not sure we are going to use
* therefore, not needed for Phase I or II
* for security & quality & flexibility, see session hijacking in guide on security
* presumably is really two tables, parent & fields

=== Data types

Note we can't use 'type' as a field name, conflicts with Ruby

Mostly line up with the input types wrapped in form_for_jqm.rb

All tables include the Ruby on Rails fields:
1.  id
2.  created_at -- datetime
3.  updated_at  -- datetime

Shorter fields are generally strings, longer text.
1.  name/summary/about
1.  description/contents/details

Locations -- for maps, ultimately, include alternate kinds of maps
1.  latitude & longitude is fine

Datetimes & Intervals -- for calendars
1.  datetime or else start & duration or else start & end

=== Class Structure

TBD:  create a class that all TalkInvite models will inherit from?

URLs
1.  security concern if supplied by user, part of about field
1.  core of any Web Search tool

=== Setup for new table

1. rails generate scaffold table field1:type1 field2:type2 ...
1. fix db/migrate file, may need foreign keys for instance
1. rake db:migrate & rake db:migrate RAILS_ENV=test
1. app/models -- fix the file & also edit the overall README
1. app/views/table/README -- possibly
1. app/controllers/table
1. app/helpers/stylesheets/table -- just setup new stub, see any eralier for example
1. app/routes -- possibly, if extra routes needed
1. spec/features/table_stories -- put in a few pendings, we aren't really sure how useful stories is
1. spec/controllers/table -- fix valid_attributes!
1. spec/models/table -- review
1. spec/factories/table -- fix, note that ids should not be hardcoded to '1', but can live with it for nonce
1. spec/views/table -- new README, possibly, if so add to base README.rdoc

=== Adding/subtracting columns for existing table

1. make sure the model_params function has the new fields, if appropriate
1. make sure the search_fields function has the new fields, if appropriate
1. check that the associated forms are ok, usually they will need changes
1. and when views are fixed, specs must be as well

=== Rebuilds of complete database

Can't reset database due to dependencies among tables, but can rebuild using structure.sql
1.  make sure that database & all tables owned by talkinvite 
1.  use "kill -15" to terminate dead but blocking procs
1.  to get plsql language back in will need to run top of structure.sql as postgres
1.  use rake db:seed to reseed
1.  good way to reorder columns -- note this can count as "dinking"!
