== Schema

=== List of Tables

Note we can't use 'file' as a table name, conflicts with Ruby

In order of creation:

1. Schema_Migrations -- no views or controllers for these
1. People -- will be adding locations to this
1. Sessions
1. Talks -- links up to people, will be adding venues to this
1. Members -- links to talk & to people, includes 'admin' status (with reference to talk), payload is rsvp_status, member_type
1. Comments -- links to talk & to people, payload is text
1. Messages -- person to person, various modalities, sender, receiver, talk
1. Faqs -- doubles as help text, no links, question, answer, tags point to this as well!
1. Credits -- links to creator, name, details, url, tags point to this as well!
1. Helps
1. Maps -- links to creator, has datasets, center, scale, maybe type on it, has link to talk, may need settings as well (json field). virtual table, like sessions.

Planned but not yet implemented tables:

1. Attachments -- for file uploads, generalize from profile image uploads
  * polymorphic
  * point up to talks, people, credits, faqs, helps, pretty much everything
  * standard, work from examples
  * needs maintenance reports
  * have a creator (for people has to be the person him or her self)
1. Topics -- for twitter searches & the like
  * from hashtags, google news
  * and hand submitted
  * used for subjects (summary -> subject)
  * count as tag
1. Tags -- for interests for people
  * like attachments, attach to everything
  * and like attachments has an originator
  * needs tools, to get tagclouds  
1. Ads -- to generate revenue; in parallel with talks, comments, to blend in with them
  * unclear, will need content, stats, strategy, contact/source
1. Calendars -- in parallel with Maps
  * virtual table, like maps
  * used to help coordinate people converging on a talk, again like maps
1. Sessions -- for security & quality & flexibility, see session hijacking in guide on security
  * presumably is really two tables, parent & fields
  * use examples, if we decide to go this way at all

Currently tabled tables

1. Connections -- talk2talk, connections, creator, from_talk, to_talk, an advanced feature, may not need, can use for clone previous, repeating, & so on. May help with searches (big in our design).  At this point, we don't know how we want to use:  clone-father, repeating, and so on.  Could implement with a self-join, side-table, settings field, lots of ways.  Fairly complex, even more complex than relationships. Wait on need. YAGNI.
1. Circles? Relationships? 
1. SVGs? -- not yet, not sure needed
1. Groups? -- goes to relationships + a field in people (to indicate really a group)
  * can be useful for searches for talkees
1. Recurring talks? -- like meetups? -- goes to talk2talk plus a field in talks to indicate ongoing
  * recurring field + schedule, like calendar on mac
1. Ratings? -- fold in to tags
  * or is a simple like this better
1. Requests -- previously used, a bit much however
  * think not`
1. Errors -- previously used, a bit much however
  * expect we will stick with logs for immediate future
1. Pages -- a bit too meta
  * too too meta
1. Qxs -- great name, but errors on side of inscrutable
  * is this a table or an alien civilization?

=== Data types

Note we can't use 'type' as a field name, conflicts with Ruby

Mostly line up with the input types wrapped in form_for_jqm.rb

All tables include the Ruby on Rails fields:
1.  id
2.  created_at -- datetime
3.  updated_at  -- datetime

Shorter fields are generally strings, longer text.
1.  name/summary/about
1.  description/contents/details

Locations -- for maps, ultimately, include alternate kinds of maps
1.  latitude & longitude is fine

Datetimes & Intervals -- for calendars
1.  datetime or else start & duration or else start & end

=== Class Structure

TBD:  create a class that all TalkInvite models will inherit from?

URLs
1.  security concern if supplied by user, part of about field
1.  core of any Web Search tool

=== Setup for new table

1. rails generate scaffold table field1:type1 field2:type2 ...
1. fix db/migrate file, may need foreign keys for instance
1. rake db:migrate & rake db:migrate RAILS_ENV=test
1. app/models -- fix the file & also edit the overall README
1. app/views/table/README -- possibly
1. app/controllers/table
1. app/helpers/stylesheets/table -- just setup new stub, see any eralier for example
1. app/routes -- possibly, if extra routes needed
1. spec/features/table_stories -- put in a few pendings, we aren't really sure how useful stories is
1. spec/controllers/table -- fix valid_attributes!
1. spec/models/table -- review
1. spec/factories/table -- fix, note that ids should not be hardcoded to '1', but can live with it for nonce
1. spec/views/table -- new README, possibly, if so add to base README.rdoc

=== Adding/subtracting columns for existing table

1. make sure the model_params function has the new fields, if appropriate
1. make sure the search_fields function has the new fields, if appropriate


