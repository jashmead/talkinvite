== Schema

=== Strategy

The system is a mashup of the Ruby on Rails tutorial by Michael Hardl 
(http://ruby.railstutorial.org/ruby-on-rails-tutorial-book?version=4.0), 
Twitter (which was originally written in Ruby on Rails),
Leaflet (Google maps, Open Street Map),
jQuery Calendar stuff,
SVG for advanced layouts,
some PostgreSQL specific stuff,
and a bit of glue.

=== Tables

All tables include the Ruby on Rails fields:
1.  id
2.  created_at -- datetime
3.  updated_at  -- datetime

Shorter fields are generally strings, longer text.

Note due to Ruby's omnipresent use of convention, some obvious names are <em>bad ideas</em>,
i.e. using 'type' can cause mysterious failures.

And we can't use 'File' as a table name, same reason.  Hence attachments.

Tables in alphabetical order:
1.  attachments -- to better work with postgres, polymorphic up to locations, people, posts, talks, tweets
1.  calendar -- like sessions, a materialized view, includes range, scale, current date (cx)
1.  connections -- talk to talk, from/to (t2t?)
1.  locations -- better as places?
1.  maps -- like sessions, a materialized view, includes bounding box, focus, probably some other stuff
1.  messages -- user to user messages, in re whatever they like.
1.  notifications -- like posts, but they announce the talk
1.  people -- the source of all difficulties
1.  posts -- posts attached to a talk, also includes join, leave, as well as default comment
1.  relationships -- person to person, from/to
1.  schema_migrations* -- rails table
1.  sessions* -- used by tutuorial, internal
1.  tags  -- will include ratings, polymorphic up to all core tables locations, people, posts, talks, tweets (tx)
1.  talks -- the raison de etre of the system
1.  tweets -- subclass of notifications, first of possibly many

Core tables:
  1. talks
  1. people
  1. locations
  
Less core tables:
  1. posts, mostly done in partials
  1. tags, mostly done in partials
  1. messages, mostly done in partials

Materialized views:
  1. maps
  1. calendars
  1. sessions

Support tables:
  1. attachments (can't use name files)
  1. tags (also figures at top level as topics of talks)

Groups or relationships:
  peer2peer style -- a is following b
    -- how tutorial does it
    -- more informal, better suited to problem here
    -- can add "virtual" flag to make it act as a group, if that becomes useful
      -- ok, go peer2peer
  group style -- both a and b are members of same group
    -- more static

Relationships
  1. user_user -- relationships, get from tutorial
  1. talk_talk -- connections
  1. location_location -- even needed?, call associations if we do need it

Tables not needed for MVP but under consideration
1.  polls -- ask people what features they would like & so on.
1.  ratings -- see as tag?

Validations done:
1.  presence of
1.  inclusion_of
1.  user validations from the tutorial
1.  some talk validations

Validations yet to do:
1.  add in 'check' on postgres side for _type columns
1.  add in not-null for fk fields -- done

Procedures:
1.  when changing types, make sure all the test code knows about the new types
1.  when adding/changing/deleting fields:  check all the spec code:  requests, models, controllers, views, & factories

TBD:
1.  Mark various fields not-null, when appropriate; set not-null in the future

--
Not able to get links to work currently
++
