== Schema

=== Strategy

The system is a mashup of the Ruby on Rails tutorial by Michael Hardl 
(http://ruby.railstutorial.org/ruby-on-rails-tutorial-book?version=4.0), 
Twitter (which was originally written in Ruby on Rails),
Google maps, 
Open Street Map,
some PostgreSQL specific stuff,
and a bit of glue.

=== Tables

All tables include the Ruby on Rails fields:
1.  id
2.  created_at -- datetime
3.  updated_at  -- datetime

Shorter fields are generally strings, longer text.

Note due to Ruby's omnipresent use of convention, some obvious names are <em>bad ideas</em>,
i.e. using 'type' can cause mysterious failures.
(This is why it is person_type, not type.)

And we can't use 'File' as a table name, same reason.  Hence attachments.

Tables in alphabetical order:
1.  attachments -- to better work with postgres, polymorphic up to locations, people, posts, talks, tweets
1.  calendar -- virtual model, includes range, scale, current date
1.  locations -- better as places?
1.  maps -- virtual model, includes bounding box, focus, probably some other stuff
1.  people -- the source of all difficulties
1.  posts -- posts attached to a talk, also includes join, leave, as well as default comment
1.  tags  -- will include ratings, polymorphic up to locations, people, posts, talks, tweets
1.  talks -- the raison de etre of the system

Tables not needed for MVP but under consideration
1.  messages -- user to user messages, in re a specific talk.  Put in but scaffolding disliked. Removed.  See notes for assocation stuff.
1.  polls -- ask people what features they would like & so on.
1.  talk_talk -- grouping of talks, basically organization versus talk.
1.  user_talk -- basically membership -- can use posts to get started.
1.  user_user -- grouping of users, basically relationships.

Validations done:
1.  presence of
1.  inclusion_of
1.  user validations from the tutorial
1.  some talk validations

Validations yet to do:
1.  add in 'check' on postgres side for _type columns
1.  add in not-null for fk fields -- done

Procedures:
1.  when changing types, make sure all the test code knows about the new types
1.  when adding/changing/deleting fields:  check all the spec code:  requests, models, controllers, views, & factories

--
Not able to get links to work currently
++
